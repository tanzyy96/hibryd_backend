// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Channel struct {
	ID         int          `json:"id"`
	Type       *ChannelType `json:"type"`
	Name       string       `json:"name"`
	ExpiryDate *time.Time   `json:"expiry_date"`
}

type ChannelParticipants struct {
	UserID    string `json:"user_id"`
	ChannelID int    `json:"channel_id"`
}

type Company struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type DayStatus struct {
	ID           int           `json:"id"`
	DayIndex     int           `json:"day_index"`
	Date         time.Time     `json:"date"`
	WeekStatusID string        `json:"week_status_id"`
	Status       *RemoteStatus `json:"status"`
}

type DayTasks struct {
	ID       int       `json:"id"`
	UserID   string    `json:"user_id"`
	Datetime time.Time `json:"datetime"`
}

type Event struct {
	ID          int       `json:"id"`
	Datetime    time.Time `json:"datetime"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
}

type EventImage struct {
	ID         int    `json:"id"`
	ImageS3Key string `json:"image_s3_key"`
	Loves      int    `json:"loves"`
	Comments   int    `json:"comments"`
	EventID    int    `json:"event_id"`
}

type Message struct {
	ID         int     `json:"id"`
	SenderID   string  `json:"sender_id"`
	Text       *string `json:"text"`
	ImageS3Key *string `json:"image_s3_key"`
	ReplyTo    *string `json:"reply_to"`
	ChannelID  int     `json:"channel_id"`
}

type NewCompany struct {
	Name string `json:"name"`
}

type NewDayStatus struct {
	DayIndex int          `json:"day_index"`
	Status   RemoteStatus `json:"status"`
}

type NewDayTasks struct {
	UserID   string     `json:"user_id"`
	Datetime string     `json:"datetime"`
	Tasks    []*NewTask `json:"tasks"`
}

type NewTask struct {
	Description string      `json:"description"`
	Status      *TaskStatus `json:"status"`
}

type NewUser struct {
	Username  string `json:"username"`
	LastName  string `json:"last_name"`
	FirstName string `json:"first_name"`
	Birthdate string `json:"birthdate"`
	JoinedAt  string `json:"joined_at"`
	CompanyID int    `json:"company_id"`
}

type NewWeekStatus struct {
	UserID    string          `json:"user_id"`
	StartDate string          `json:"start_date"`
	EndDate   string          `json:"end_date"`
	Statuses  []*NewDayStatus `json:"statuses"`
}

type NewWeekTasks struct {
	UserID    string     `json:"user_id"`
	StartDate string     `json:"start_date"`
	EndDate   string     `json:"end_date"`
	Tasks     []*NewTask `json:"tasks"`
}

type Poll struct {
	ID         int       `json:"id"`
	ExpiryDate time.Time `json:"expiry_date"`
	ChannelID  int       `json:"channel_id"`
}

type PollOption struct {
	ID          int    `json:"id"`
	Description string `json:"description"`
	AddedBy     string `json:"added_by"`
	Count       int    `json:"count"`
	PollID      int    `json:"poll_id"`
}

type PollOptionVote struct {
	ID           int       `json:"id"`
	VotedBy      string    `json:"voted_by"`
	VotedAt      time.Time `json:"voted_at"`
	PollOptionID int       `json:"poll_option_id"`
}

type Task struct {
	ID          int         `json:"id"`
	DaytasksID  int         `json:"daytasks_id"`
	Description string      `json:"description"`
	Status      *TaskStatus `json:"status"`
}

type UpdateDayStatus struct {
	ID     int           `json:"id"`
	Status *RemoteStatus `json:"status"`
}

type UpdateDayTasks struct {
	ID    int           `json:"id"`
	Tasks []*UpdateTask `json:"tasks"`
}

type UpdateTask struct {
	ID          int         `json:"id"`
	Description *string     `json:"description"`
	Status      *TaskStatus `json:"status"`
}

type UpdateWeekStatus struct {
	ID       int                `json:"id"`
	Statuses []*UpdateDayStatus `json:"statuses"`
}

type User struct {
	ID              string    `json:"id"`
	Username        string    `json:"username"`
	LastName        string    `json:"last_name"`
	FirstName       string    `json:"first_name"`
	CreatedAt       time.Time `json:"created_at"`
	Birthdate       time.Time `json:"birthdate"`
	Qotw            *string   `json:"qotw"`
	UpdatedAt       time.Time `json:"updated_at"`
	JoinedAt        time.Time `json:"joined_at"`
	CompanyID       int       `json:"company_id"`
	ProfilePicS3Key *string   `json:"profile_pic_s3_key"`
}

type WeekStatus struct {
	ID        string    `json:"id"`
	UserID    string    `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

type ChannelType string

const (
	ChannelTypeVoting    ChannelType = "VOTING"
	ChannelTypeMessaging ChannelType = "MESSAGING"
)

var AllChannelType = []ChannelType{
	ChannelTypeVoting,
	ChannelTypeMessaging,
}

func (e ChannelType) IsValid() bool {
	switch e {
	case ChannelTypeVoting, ChannelTypeMessaging:
		return true
	}
	return false
}

func (e ChannelType) String() string {
	return string(e)
}

func (e *ChannelType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChannelType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChannelType", str)
	}
	return nil
}

func (e ChannelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RemoteStatus string

const (
	RemoteStatusHome        RemoteStatus = "HOME"
	RemoteStatusOffice      RemoteStatus = "OFFICE"
	RemoteStatusUnavailable RemoteStatus = "UNAVAILABLE"
	RemoteStatusLeave       RemoteStatus = "LEAVE"
	RemoteStatusMedical     RemoteStatus = "MEDICAL"
	RemoteStatusNone        RemoteStatus = "NONE"
)

var AllRemoteStatus = []RemoteStatus{
	RemoteStatusHome,
	RemoteStatusOffice,
	RemoteStatusUnavailable,
	RemoteStatusLeave,
	RemoteStatusMedical,
	RemoteStatusNone,
}

func (e RemoteStatus) IsValid() bool {
	switch e {
	case RemoteStatusHome, RemoteStatusOffice, RemoteStatusUnavailable, RemoteStatusLeave, RemoteStatusMedical, RemoteStatusNone:
		return true
	}
	return false
}

func (e RemoteStatus) String() string {
	return string(e)
}

func (e *RemoteStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RemoteStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RemoteStatus", str)
	}
	return nil
}

func (e RemoteStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusCompleted  TaskStatus = "COMPLETED"
	TaskStatusIncomplete TaskStatus = "INCOMPLETE"
	TaskStatusPushed     TaskStatus = "PUSHED"
	TaskStatusCancelled  TaskStatus = "CANCELLED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusCompleted,
	TaskStatusIncomplete,
	TaskStatusPushed,
	TaskStatusCancelled,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusCompleted, TaskStatusIncomplete, TaskStatusPushed, TaskStatusCancelled:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
