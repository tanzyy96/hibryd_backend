scalar Time
# TODO: disable passing time as param

enum TaskStatus {
	COMPLETED
	INCOMPLETE
	PUSHED
	CANCELLED
}

enum RemoteStatus {
	HOME
	OFFICE
	UNAVAILABLE
	LEAVE
	MEDICAL
	NONE
}

enum ChannelType {
	VOTING
	MESSAGING
}

type Company {
	id: Int!
	name: String!
}

type User {
	id: ID!
	username: String!
	last_name: String!
	first_name: String!
	created_at: Time!
	birthdate: Time!
	qotw: String
	updated_at: Time!
	joined_at: Time!
	company_id: Int!
	profile_pic_s3_key: String
}

type WeekStatus {
	id: ID!
	user_id: ID!
	start_date: Time!
	end_date: Time!
}

type DayStatus {
	id: Int!
	day_index: Int!
	date: Time!
	week_status_id: ID!
	status: RemoteStatus
}

type DayTasks {
	id: Int!
	user_id: ID!
	datetime: Time!
}

type Task {
	id: Int!
	daytasks_id: Int!
	description: String!
	status: TaskStatus
}

type Event {
	id: Int!
	datetime: Time!
	name: String!
	description: String
}

type EventImage {
	id: Int!
	image_s3_key: String!
	loves: Int!
	comments: Int!
	event_id: Int!
}

type Channel {
	id: Int!
	type: ChannelType
	name: String!
	expiry_date: Time
}

type ChannelParticipants {
	user_id: String!
	channel_id: Int!
}

type Message {
	id: Int!
	sender_id: String!
	text: String
	image_s3_key: String
	reply_to: String
	channel_id: Int!
}

type Poll {
	id: Int!
	expiry_date: Time!
	channel_id: Int!
}

type PollOption {
	id: Int!
	description: String!
	added_by: String!
	count: Int!
	poll_id: Int!
}

type PollOptionVote {
	id: Int!
	voted_by: String!
	voted_at: Time!
	poll_option_id: Int!
}

## QUERY
type Query {
	user(id: ID!): User
	users: [User!]!
}

## MUTATION
input NewCompany {
	name: String!
}

input NewUser {
	username: String!
	last_name: String!
	first_name: String!
	birthdate: String!
	joined_at: String!
	company_id: Int!
}

input NewTask {
	description: String!
	status: TaskStatus
}

input NewDayTasks {
	user_id: ID!
	datetime: String!
	tasks: [NewTask!]!
}

input NewWeekTasks {
	user_id: ID!
	start_date: String!
	end_date: String!
	tasks: [NewTask!]!
}

input NewDayStatus {
	day_index: Int!
	status: RemoteStatus!
}

input NewWeekStatus {
	user_id: ID!
	start_date: String!
	end_date: String!
	statuses: [NewDayStatus!]!
}

input UpdateDayTasks {
	id: Int!
	tasks: [UpdateTask!]!
}

input UpdateTask {
	id: Int!
	description: String
	status: TaskStatus
}

input UpdateWeekStatus {
	id: Int!
	statuses: [UpdateDayStatus!]!
}

input UpdateDayStatus {
	id: Int!
	status: RemoteStatus
}

type Mutation {
	createCompany(input: NewCompany!): Company!
	createUser(input: NewUser!): User!
	createDayTasks(input: NewDayTasks!): [Task]!
	createWeekTasks(input: NewWeekTasks!): [DayTasks]!
	createWeekStatus(input: NewWeekStatus!): [DayStatus!]!

	updateDayTasks(input: UpdateDayTasks!): [Task!]!
	updateTask(input: UpdateTask!): Task!
	updateDayStatus(input: UpdateDayStatus!): DayStatus!
	updateWeekStatus(input: UpdateWeekStatus!): [DayStatus!]!
}
